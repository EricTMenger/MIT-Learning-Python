# Problem Set 2, hangman.py
# Name: 
# Collaborators:
# Time spent:

# Hangman Game
# -----------------------------------
# Helper code
# You don't need to understand this helper code,
# but you will have to know how to use the functions
# (so be sure to read the docstrings!)
import random
import string

WORDLIST_FILENAME = "words.txt"


def load_words():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist



def choose_word(wordlist):
    """
    wordlist (list): list of words (strings)
    
    Returns a word from wordlist at random
    """
    return random.choice(wordlist)

# end of helper code

# -----------------------------------

# Load the list of words into the variable wordlist
# so that it can be accessed from anywhere in the program



def is_word_guessed(secret_word,letters_guessed):
    
    count = 0
    length_secret_word = len(secret_word)
    length_letters_guessed = len(letters_guessed)
    
    for i in range(0,length_secret_word):
        for j in range(0, length_letters_guessed):
            if(secret_word[i] == letters_guessed[j]):
                count = count + 1
    if(count == len(secret_word)):
        return True
    else:
        return False



def get_guessed_word(secret_word,letters_guessed):
    
    r = []
    length_secret_word = len(secret_word)
    length_letters_guessed = len(letters_guessed)
    
    
    for x in range(0,length_secret_word):
        r = r + ['_'] + [' ']
    
    for i in range(0,length_secret_word):
        for j in range(0, length_letters_guessed):
            if(secret_word[i] == letters_guessed[j]):  
                r[i*2] = letters_guessed[j]
                
    r = ''.join(r)           
    return r



def get_avialable_letters(letters_guessed):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    alphabet = list(alphabet)
    length_letters_guessed = len(letters_guessed)
    updated_alphabet = []
    
    for i in range(0,length_letters_guessed):
        alphabet.remove(letters_guessed[i])
        
    updated_alphabet = ''.join(alphabet)
    return updated_alphabet

    
    

def hangman(secret_word):
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses

    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Remember to make
      sure that the user puts in a letter!
    
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
    
    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    guesses = 6
    guessedletter = ''
    guessedletters = []
    
    
    print('welcome to the game Hangman!')
    print('I am thinking of a word that is '+ str(len(secret_word)) +' letters long')
    print('---------------------')

    while(guesses != 0):
        
        avialable_letters = get_guessed_word(secret_word, guessedletters)
        print('you have ' + str(guesses) + ' left')
        print('Available letters: '+ str(get_avialable_letters(guessedletters)))
        guessedletter = input('please guess a single letter: ')
        
        while(guessed_before(guessedletter,get_avialable_letters(guessedletters)) == True):
                print('That letter has already been guessed')
                guessedletter = input('please guess a single letter: ')        
        
        while(guessedletter < 'a' or guessedletter > 'z' or len(guessedletter) > 1):
            guessedletter = input('please guess a single letter: ')
        guessedletters.append(guessedletter) 
        
        if (avialable_letters == get_guessed_word(secret_word, guessedletters)):
            print('Opps! That letter is not in my word: ' + get_guessed_word(secret_word, guessedletters))
            guesses = guesses - 1
        else:
            print('Good guess: ' + get_guessed_word(secret_word, guessedletters))
        if(is_word_guessed(secret_word, guessedletters) == True):
            break
    if(guesses == 0):
        print('Sorry, you ran out of guesses. The word was ' + secret_word)
    else:
        print('Congratulations, you won!')
        print('Your total score for this game is: ' + str(guesses*(26 - len(get_avialable_letters(guessedletters)))))        
        
        
            

# When you've completed your hangman function, scroll down to the bottom
# of the file and uncomment the first two lines to test
#(hint: you might want to pick your own
# secret_word while you're doing your own testing)


# -----------------------------------
def guessed_before(guessed_letter, avialable_letters):
    i = 0
    for i in range(0,len(avialable_letters)):
        if(guessed_letter == avialable_letters[i]):
            return False
    
    return True
        
    


def match_with_gaps(my_word, other_word):
    '''
    my_word: string with _ characters, current guess of secret word
    other_word: string, regular English word
    returns: boolean, True if all the actual letters of my_word match the 
        corresponding letters of other_word, or the letter is the special symbol
        _ , and my_word and other_word are of the same length;
        False otherwise: 
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    pass



def show_possible_matches(my_word):
    '''
    my_word: string with _ characters, current guess of secret word
    returns: nothing, but should print out every word in wordlist that matches my_word
             Keep in mind that in hangman when a letter is guessed, all the positions
             at which that letter occurs in the secret word are revealed.
             Therefore, the hidden letter(_ ) cannot be one of the letters in the word
             that has already been revealed.

    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    pass



def hangman_with_hints(secret_word):
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses
    
    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Make sure to check that the user guesses a letter
      
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
      
    * If the guess is the symbol *, print out all words in wordlist that
      matches the current guessed word. 
    
    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    pass



# When you've completed your hangman_with_hint function, comment the two similar
# lines above that were used to run the hangman function, and then uncomment
# these two lines and run this file to test!
# Hint: You might want to pick your own secret_word while you're testing.


if __name__ == "__main__":
#     pass

    # To test part 2, comment out the pass line above and
    # uncomment the following two lines.
    
     secret_word = choose_word(load_words())
     hangman(secret_word)

###############
    
    # To test part 3 re-comment out the above lines and 
    # uncomment the following two lines. 
    
    #secret_word = choose_word(wordlist)
    #hangman_with_hints(secret_word)
